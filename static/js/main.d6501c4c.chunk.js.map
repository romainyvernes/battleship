{"version":3,"sources":["logic/ship.js","logic/gameboard.js","logic/player.js","logic/game.js","components/Board.js","components/Setup.js","components/Main.js","components/DialogBox.js","components/App.js","index.js"],"names":["Ship","length","name","parts","Array","fill","hit","index","Error","isSunk","i","Gameboard","width","height","grid","push","j","getShipCoords","axis","coords","map","coord","parseInt","intX","intY","isInRange","concat","x1","y1","x2","y2","isTaken","Number","isInteger","ships","addShip","start","end","ship","x","y","receiveAttack","message","shipPartIndex","hitShip","isGameOver","placeShipRandomly","shipLength","axes","loop","randomX","Math","floor","random","randomY","randomAxis","randomCoords","err","Player","boardWidth","boardHeight","turn","boardPositions","toggleTurn","getTurnStatus","getAttackCoords","randomIndex","splice","Game","boardSide","human","computer","humanBoard","computerBoard","shipsToPlace","Board","props","playerType","onAttack","mode","onPositionHover","onPositionOut","onPlaceShip","className","row","index1","position","index2","id","onClick","onMouseEnter","onMouseLeave","data-axis","uniqid","Setup","useState","setAxis","Main","humanGrid","computerGrid","playStatus","DialogBox","App","setHumanGrid","setComputerGrid","setPlayStatus","shipToPlaceIndex","setShipToPlaceIndex","setMessage","useEffect","handleAttackMessages","attackObj","player","newMessage","type","window","location","reload","e","currentTarget","dataset","split","setTimeout","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6501c4c.chunk.js","sourcesContent":["const Ship = (length, name='') => {\n  const parts = new Array(length).fill(0);\n\n  const hit = (index) => {\n    if (parts[index] !== 1) {\n      parts[index] = 1;\n    } else {\n      throw new Error('Position already hit');\n    }\n  };\n\n  const isSunk = () => {\n    for (let i = 0; i < parts.length; i++) {\n      if (parts[i] === 0) return false;\n    }\n    return true;\n  };\n\n  return {\n    name,\n    parts,\n    hit,\n    isSunk,\n  };\n};\n\nexport default Ship;","import Ship from './ship';\n\nconst Gameboard = (width, height) => {\n  const grid = [];\n  \n  // create 2D array filled with false booleans\n  if (width > 0 && height > 0) {\n    for (let i = 0; i < height; i++) {\n      grid.push([]);\n      for (let j = 0; j < width; j++) {\n        grid[i].push(false);\n      }\n    }\n  } else {\n    throw new Error('Invalid width or height');\n  }\n\n  const getShipCoords = ([x, y], length, axis) => {\n    const coords = [];\n    const [intX, intY] = [x, y].map((coord) => parseInt(coord, 10));\n    if (axis === 'y') { // ship is positioned vertically\n      for (let i = intY; i < intY + length; i++) {\n        coords.push([intX, i]);\n      }\n      return coords;\n    }\n    // if ship is positioned horizontally\n    for (let i = intX; i < intX + length; i++) {\n      coords.push([i, intY]);\n    }\n    return coords;\n  };\n\n  const isInRange = (coords) => {\n    const [x1, y1, x2, y2] = coords[0].concat(coords[coords.length - 1]);\n    if (\n      x1 >= 0 && x1 < grid[0].length &&\n      y1 >= 0 && y1 < grid.length &&\n      x2 >= 0 && x2 < grid[0].length &&\n      y2 >= 0 && y2 < grid.length\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  const isTaken = (coords) => {\n    for (let i = 0; i < coords.length; i++) {\n      if (Number.isInteger(grid[coords[i][1]][coords[i][0]])) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const ships = [];\n  \n  const addShip = (coords, name) => {\n    const [x1, y1, x2, y2] = coords[0].concat(coords[coords.length - 1]);\n    \n    if (!isInRange(coords)) {\n      throw new Error('Position out of range');\n    };\n    \n    if (\n      (x1 === x2 && y1 > y2) || // ship is positioned vertically\n      (y1 === y2 && x1 > x2) // ship is positioned horizontally\n    ) {\n      throw new Error(\n        'Please enter coordinates from left to right/top to bottom'\n      );\n    }\n\n    // check if any of those coordinates overlap with another ship\n    if (isTaken(coords)) {\n      throw new Error('Another ship is already positioned here');\n    }\n    \n    // add new instance of ship to ships array\n    ships.push({\n      coords: {start: [x1, y1], end: [x2, y2]},\n      ship: Ship(coords.length, name),\n    });\n\n    // map ship onto grid\n    coords.map(([x, y]) => grid[y][x] = ships.length - 1);\n  };\n\n  const hitShip = (index, [x, y]) => {\n    const { ship, coords } = ships[index];\n    let shipPartIndex;\n\n    if (coords.start[0] === coords.end[0]) { // ship is positioned vertically\n      shipPartIndex = y - coords.start[1];\n    } else { // ship is positioned horizontally\n      shipPartIndex = x - coords.start[0];\n    }\n\n    ship.hit(shipPartIndex);\n\n    return ship;\n  };\n\n  const receiveAttack = ([x, y]) => {\n    if (x < 0 || x > grid[0].length - 1 || y < 0 || y > grid.length - 1) {\n      throw new Error('Position is out of range');\n    }\n    \n    switch (grid[y][x]) {\n      case false: // position was never hit\n        grid[y][x] = 'miss';\n        return {\n          message: 'miss',\n        };\n      case 'miss': // position was already hit once\n        throw new Error('Position already hit');\n      default: // position is an integer associated with a ship\n        const ship = hitShip(grid[y][x], [x, y]);\n        grid[y][x] = 'hit';\n        return { \n          message: 'hit',\n          ship,\n        };\n    }\n  };\n\n  const isGameOver = () => {\n    for (let i = 0; i < ships.length; i++) {\n      if (!ships[i].ship.isSunk()) return false;\n    }\n    return true;\n  };\n\n  const placeShipRandomly = (shipLength, name) => {\n    const axes = ['x', 'y'];\n    \n    let loop = true;\n\n    while (loop) {\n      try {\n        const randomX = Math.floor(Math.random() * width);\n        const randomY = Math.floor(Math.random() * height);\n        const randomAxis = axes[Math.floor(Math.random() * 2)];\n        const randomCoords = getShipCoords(\n          [randomX, randomY],\n          shipLength,\n          randomAxis\n        );\n        addShip(randomCoords, name);\n        loop = false;\n      } catch (err) {\n        continue;\n      }\n    }\n  };\n\n  return {\n    grid,\n    getShipCoords,\n    isTaken,\n    isInRange,\n    addShip,\n    receiveAttack,\n    isGameOver,\n    placeShipRandomly,\n  };\n};\n\nexport default Gameboard;\n","const Player = ({name, boardWidth, boardHeight} = {}) => {\n  let turn = false;\n  let boardPositions = [];\n\n  for (let i = 0; i < boardHeight; i++) {\n    for (let j = 0; j < boardWidth; j++) {\n      boardPositions.push([j, i]);\n    }\n  }\n\n  const toggleTurn = () => {\n    if (turn) turn = false;\n    turn = true;\n  };\n\n  const getTurnStatus = () => {\n    return turn;\n  };\n\n  const getAttackCoords = () => {\n    if (boardPositions.length === 0) return 'All positions targeted'; \n    const randomIndex = Math.floor(Math.random() * boardPositions.length);\n    const randomCoords = boardPositions[randomIndex];\n    boardPositions.splice(randomIndex, 1);\n    return randomCoords;\n  };\n\n  return {\n    name,\n    toggleTurn,\n    getAttackCoords,\n    getTurnStatus,\n  }\n};\n\nexport default Player;","import Gameboard from './gameboard';\nimport Player from './player';\n\nconst Game = (() => {\n  // set size of boards\n  const boardSide = 10;\n  \n  // create players and gameboards\n  const human = Player();\n  const computer = Player({\n    boardHeight: boardSide,\n    boardWidth: boardSide,\n  });\n  const humanBoard = Gameboard(boardSide, boardSide);\n  const computerBoard = Gameboard(boardSide, boardSide);\n  \n  // array of ships to place\n  const shipsToPlace = [\n    {name: 'carrier', length: 5},\n    {name: 'battleship', length: 4},\n    {name: 'destroyer', length: 3},\n    {name: 'submarine', length: 3},\n    {name: 'patrol boat', length: 2},\n  ];\n  \n  shipsToPlace.map((ship) => (\n    computerBoard.placeShipRandomly(ship.length, ship.name)\n  ));\n\n  const isGameOver = () => {\n    if (humanBoard.isGameOver() || computerBoard.isGameOver()) {\n      return true;\n    }\n    return false;\n  };\n\n  return {\n    human,\n    computer,\n    humanBoard,\n    computerBoard,\n    isGameOver,\n    shipsToPlace,\n  };\n})();\n\nexport default Game;","import React from 'react';\nimport '../styles/Board.css';\nimport uniqid from \"uniqid\";\n\nconst Board = (props) => {\n  const { \n    grid, \n    playerType, \n    onAttack, \n    mode, \n    axis, \n    onPositionHover,\n    onPositionOut,\n    onPlaceShip,\n  } = props;\n  \n  return (\n    <div className='board'>\n      <div className=\"content\">\n        {grid.map((row, index1) => (\n          row.map((position, index2) => (\n            <div \n              className={`board-element${\n                !mode && typeof position === 'string'\n                  ? ` ${position}`\n                  : ''\n              }${\n                mode && position === true\n                  ? ' allowed'\n                  : ''\n              }${\n                mode && position !== true\n                  ? ' not-allowed'\n                  : ''\n              } ${\n                playerType || ''\n              }${\n                Number.isInteger(position) && \n                (playerType === 'human' || !playerType)\n                  ? ' ship'\n                  : ''\n              }`}\n              key={uniqid()}\n              id={`${index2}-${index1}`}\n              onClick={onPlaceShip || onAttack || null}\n              onMouseEnter={onPositionHover || null}\n              onMouseLeave={onPositionOut || null}\n              data-axis={axis || null}\n            >\n              {(playerType === 'human' || mode) && Number.isInteger(position)\n                ? '●'\n                : null\n              }\n              {position === 'hit' || position === 'miss'\n                ? '✕'\n                : null\n              }\n            </div>\n          ))\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Board;","import React, { useState } from 'react';\nimport Board from './Board';\nimport '../styles/Setup.css';\n\nconst Setup = (props) => {\n  const { \n    grid, \n    onPositionHover, \n    onPositionOut, \n    onPlaceShip, \n  } = props;\n  const [axis, setAxis] = useState('x');\n\n  const toggleAxis = () => {\n    if (axis === 'x') {\n      setAxis('y');\n    } else {\n      setAxis('x');\n    }\n  }\n\n  return (\n    <div className='setup'>\n      <p className='axis-selection' onClick={toggleAxis}>\n        {axis === 'x' ? 'Horizontal' : 'Vertical'}\n      </p>\n      <Board \n        grid={grid} \n        mode={'setup'} \n        axis={axis} \n        onPositionHover={onPositionHover} \n        onPositionOut={onPositionOut}\n        onPlaceShip={onPlaceShip}\n      />\n    </div>\n  );\n};\n\nexport default Setup;\n","import React from 'react';\nimport Board from './Board';\nimport '../styles/Main.css';\n\nconst Main = (props) => {\n  const { \n    humanGrid, \n    computerGrid, \n    onAttack, \n    playStatus,\n  } = props;\n  \n  return (\n    <div className='main'>\n      <div className='grid-container' id='friendly'>\n        <h2>Friendly Waters</h2>\n        <Board grid={humanGrid} playerType={'human'} />\n      </div>\n      <div className='grid-container' id='enemy'>\n        <h2>Enemy Waters</h2>\n        <Board \n          grid={computerGrid} \n          playerType={'computer'}\n          onAttack={playStatus ? onAttack : null}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport '../styles/DialogBox.css';\n\nconst DialogBox = (props) => {\n  const { message } = props;\n  \n  return (\n    <div className='dialog-box'>\n      <p key={message}>{message}</p>\n    </div>\n  );\n};\n\nexport default DialogBox;","import React, { useState, useEffect } from 'react';\nimport '../styles/App.css';\nimport Game from '../logic/game';\nimport Setup from './Setup';\nimport Main from './Main';\nimport DialogBox from './DialogBox';\n\nconst App = () => {\n  const [humanGrid, setHumanGrid] = useState(\n    Game.humanBoard.grid.map((row) => [...row])\n  );\n  const [computerGrid, setComputerGrid] = useState(\n    Game.computerBoard.grid.map((row) => [...row])\n  );\n  // state variable that indicates whether game is ongoing\n  const [playStatus, setPlayStatus] = useState(true);\n  // state variable that stores the index of the ship to place at start\n  const [shipToPlaceIndex, setShipToPlaceIndex] = useState(0);\n  // state variable that stores message to display in dialog box\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    if (shipToPlaceIndex < Game.shipsToPlace.length) {\n      setMessage(`Admiral, where shall we place our ${\n        Game.shipsToPlace[shipToPlaceIndex].name\n      } ?`);\n    } else {\n      setMessage('Admiral, what are your next orders ?');\n    }\n  }, [shipToPlaceIndex]);\n  \n  const handleAttackMessages = (attackObj, player) => {\n    let newMessage = '';\n\n    if (player === 'human') {\n      newMessage += 'Our fleet is firing at the enemy';\n    } else {\n      newMessage += 'The enemy is firing';\n    }\n\n    const { message, ship } = attackObj;\n\n    if (message === 'miss') {\n      newMessage += '...but missed';\n    }\n\n    if (message === 'hit') {\n      if (ship.isSunk()) {\n        newMessage += `...and sank a ${ship.name}`;\n      } else {\n        newMessage += '...and struck a ship';\n      }\n    }\n\n    setMessage(newMessage);\n  };\n  \n  const onAttack = (e) => {\n    const { id } = e.currentTarget;\n    const { computerBoard, humanBoard, isGameOver, computer } = Game;\n    \n    // trigger attack on computer and pass in result to handleAttackMessages\n    handleAttackMessages(\n      computerBoard.receiveAttack(id.split('-')), \n      'human'\n    );\n    \n    // update computerGrid to trigger new render in Main\n    setComputerGrid(computerBoard.grid.map((row) => [...row]));\n    \n    if (isGameOver()) {\n      // disable game so player can no longer attack computer\n      setPlayStatus(false);\n\n      // display winning message for player or computer\n      if (humanBoard.isGameOver()) {\n        setMessage('We\\'ve lost this battle, Admiral');\n      } else {\n        setMessage('We have defeated the enemy !');\n      }\n    } else {\n      setPlayStatus(false); // disable attack function for player\n      setTimeout(() => {\n        handleAttackMessages(\n          humanBoard.receiveAttack(computer.getAttackCoords()),\n          'computer'\n        );\n        setHumanGrid(humanBoard.grid.map((row) => [...row]));\n        setPlayStatus(true); // reenable attack function once computer has played\n      }, 3000);\n    }\n  };\n\n  const onPositionHover = (e) => {\n    const { id, dataset } = e.currentTarget;\n    const { getShipCoords, isTaken, isInRange, grid } = Game.humanBoard;\n    const { shipsToPlace } = Game;\n    const coords = getShipCoords(\n      id.split('-'), \n      shipsToPlace[shipToPlaceIndex].length, \n      dataset.axis\n    );\n    \n    if (isInRange(coords) && !isTaken(coords)) {\n      coords.map(([x, y]) => grid[y][x] = true);\n      setHumanGrid(grid.map((row) => [...row]));\n    }\n  };\n\n  const onPositionOut = () => {\n    const { grid } = Game.humanBoard;\n    \n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[0].length; j++) {\n        if (grid[i][j] === true) {\n          grid[i][j] = false;\n        }\n      }\n    }\n\n    setHumanGrid(grid.map((row) => [...row]));\n  };\n\n  const onPlaceShip = (e) => {\n    const { id, dataset } = e.currentTarget;\n    const { grid, addShip, getShipCoords, isTaken, isInRange } = Game.humanBoard;\n    const { shipsToPlace } = Game; \n    const coords = getShipCoords(\n      id.split('-'), \n      shipsToPlace[shipToPlaceIndex].length, \n      dataset.axis\n    );\n    \n    if (isInRange(coords) && !isTaken(coords)) {\n      addShip(coords, shipsToPlace[shipToPlaceIndex].name);\n      setShipToPlaceIndex(shipToPlaceIndex + 1);\n      setHumanGrid(grid.map((row) => [...row]));\n    }\n  };\n\n  const resetGame = () => {\n    window.location.reload();\n  };\n  \n  return (\n    <div className='app'>\n      <h1>BATTLESHIP</h1>\n      <DialogBox message={message} />\n      <button \n        type='submit' \n        onClick={resetGame} \n        id='restart-btn' \n        className={\n          !Game.isGameOver() ||\n          shipToPlaceIndex < Game.shipsToPlace.length\n          ? 'hide-restart' \n          : ''\n        }\n      >\n        Ready for another battle ?\n      </button>\n      {shipToPlaceIndex < Game.shipsToPlace.length\n        ? <Setup \n            grid={humanGrid} \n            onPositionHover={onPositionHover} \n            onPositionOut={onPositionOut}\n            onPlaceShip={onPlaceShip}\n          />\n        : <Main \n            humanGrid={humanGrid}\n            computerGrid={computerGrid}\n            onAttack={onAttack}\n            playStatus={playStatus}\n          />\n      }\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}